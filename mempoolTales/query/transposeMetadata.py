import requests

headers = {
    'Content-Type': 'application/json',
    'X-API-KEY': ' ',
}

json_data = {
    'sql': "WITH wallet_txs AS (  SELECT 1 AS priority, block_number, transaction_hash, 'bridge_event' AS type FROM ethereum.bridge_events WHERE '{{wallet_address}}' IN (from_address, to_address)  UNION ALL  SELECT 2 AS priority, block_number, transaction_hash, 'nft_sale' AS type FROM ethereum.nft_sales ns WHERE '{{wallet_address}}' IN (buyer_address, seller_address)  UNION ALL  SELECT 3 AS priority, ds.block_number, transaction_hash, 'dex_swap' AS type FROM ethereum.dex_swaps ds JOIN ethereum.transactions t USING (transaction_hash) WHERE t.from_address = '{{wallet_address}}'  UNION ALL  SELECT 4 AS priority, dl.block_number, transaction_hash, 'liquidity_provider' AS type FROM ethereum.dex_liquidity dl JOIN ethereum.transactions t USING (transaction_hash) WHERE dl.lp_address = '{{wallet_address}}'  UNION ALL  SELECT 5 AS priority, block_number, transaction_hash, CASE WHEN category = 'mint' THEN 'nft_mint' ELSE 'nft_transfer' END AS type FROM ethereum.nft_transfers nt WHERE '{{wallet_address}}' IN (from_address, to_address)  UNION ALL  SELECT 6 AS priority, block_number, transaction_hash, 'token_transfer' AS type FROM ethereum.token_transfers tt WHERE '{{wallet_address}}' IN (from_address, to_address)  UNION ALL  SELECT 7 AS priority, block_number, transaction_hash, 'native_token_transfer' AS type FROM ethereum.native_token_transfers ntt WHERE '{{wallet_address}}' IN (from_address, to_address)  UNION ALL  SELECT 8 AS priority, block_number, transaction_hash, 'transaction' AS type FROM ethereum.transactions WHERE '{{wallet_address}}' IN (from_address, to_address) ), unique_txs AS ( SELECT DISTINCT ON (transaction_hash) block_number, transaction_hash, type FROM wallet_txs ORDER BY transaction_hash, priority ) SELECT * FROM unique_txs ORDER BY block_number;",
    'parameters': {},
    'options': {},
}

response = requests.post('https://api.transpose.io/sql', headers=headers, json=json_data)

# Note: json_data will not be serialized by requests
# exactly as it was in the original request.
# data = '{"sql":"WITH wallet_txs AS (  SELECT 1 AS priority, block_number, transaction_hash, \'bridge_event\' AS type FROM ethereum.bridge_events WHERE \'{{wallet_address}}\' IN (from_address, to_address)  UNION ALL  SELECT 2 AS priority, block_number, transaction_hash, \'nft_sale\' AS type FROM ethereum.nft_sales ns WHERE \'{{wallet_address}}\' IN (buyer_address, seller_address)  UNION ALL  SELECT 3 AS priority, ds.block_number, transaction_hash, \'dex_swap\' AS type FROM ethereum.dex_swaps ds JOIN ethereum.transactions t USING (transaction_hash) WHERE t.from_address = \'{{wallet_address}}\'  UNION ALL  SELECT 4 AS priority, dl.block_number, transaction_hash, \'liquidity_provider\' AS type FROM ethereum.dex_liquidity dl JOIN ethereum.transactions t USING (transaction_hash) WHERE dl.lp_address = \'{{wallet_address}}\'  UNION ALL  SELECT 5 AS priority, block_number, transaction_hash, CASE WHEN category = \'mint\' THEN \'nft_mint\' ELSE \'nft_transfer\' END AS type FROM ethereum.nft_transfers nt WHERE \'{{wallet_address}}\' IN (from_address, to_address)  UNION ALL  SELECT 6 AS priority, block_number, transaction_hash, \'token_transfer\' AS type FROM ethereum.token_transfers tt WHERE \'{{wallet_address}}\' IN (from_address, to_address)  UNION ALL  SELECT 7 AS priority, block_number, transaction_hash, \'native_token_transfer\' AS type FROM ethereum.native_token_transfers ntt WHERE \'{{wallet_address}}\' IN (from_address, to_address)  UNION ALL  SELECT 8 AS priority, block_number, transaction_hash, \'transaction\' AS type FROM ethereum.transactions WHERE \'{{wallet_address}}\' IN (from_address, to_address) ), unique_txs AS ( SELECT DISTINCT ON (transaction_hash) block_number, transaction_hash, type FROM wallet_txs ORDER BY transaction_hash, priority ) SELECT * FROM unique_txs ORDER BY block_number;","parameters":{},"options":{}}'
# response = requests.post('https://api.transpose.io/sql', headers=headers, data=data)
